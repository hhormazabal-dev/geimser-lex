// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/(auth)/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/login">> = Specific
  const handler = {} as typeof import("../../src/app/(auth)/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(platform)/admin/security/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/security">> = Specific
  const handler = {} as typeof import("../../src/app/(platform)/admin/security/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(platform)/cases/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/cases/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/(platform)/cases/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(platform)/cases/new/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/cases/new">> = Specific
  const handler = {} as typeof import("../../src/app/(platform)/cases/new/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(platform)/cases/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/cases">> = Specific
  const handler = {} as typeof import("../../src/app/(platform)/cases/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(platform)/dashboard/abogado/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/abogado">> = Specific
  const handler = {} as typeof import("../../src/app/(platform)/dashboard/abogado/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(platform)/dashboard/admin/lawyers/[lawyerId]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/admin/lawyers/[lawyerId]">> = Specific
  const handler = {} as typeof import("../../src/app/(platform)/dashboard/admin/lawyers/[lawyerId]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(platform)/dashboard/admin/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/admin">> = Specific
  const handler = {} as typeof import("../../src/app/(platform)/dashboard/admin/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(platform)/dashboard/admin/users/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/admin/users">> = Specific
  const handler = {} as typeof import("../../src/app/(platform)/dashboard/admin/users/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(platform)/dashboard/analista/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/analista">> = Specific
  const handler = {} as typeof import("../../src/app/(platform)/dashboard/analista/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(platform)/dashboard/cliente/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/cliente">> = Specific
  const handler = {} as typeof import("../../src/app/(platform)/dashboard/cliente/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(platform)/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/(platform)/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(platform)/settings/(admin)/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings">> = Specific
  const handler = {} as typeof import("../../src/app/(platform)/settings/(admin)/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/auth/callback/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/callback">> = Specific
  const handler = {} as typeof import("../../src/app/api/auth/callback/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/login/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/login">> = Specific
  const handler = {} as typeof import("../../src/app/api/login/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/logout/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/logout">> = Specific
  const handler = {} as typeof import("../../src/app/api/logout/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/password-login/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/password-login">> = Specific
  const handler = {} as typeof import("../../src/app/api/password-login/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/portal/exchange/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/portal/exchange">> = Specific
  const handler = {} as typeof import("../../src/app/api/portal/exchange/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/uploads/policy/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/uploads/policy">> = Specific
  const handler = {} as typeof import("../../src/app/api/uploads/policy/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/webhooks/stage-changed/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/webhooks/stage-changed">> = Specific
  const handler = {} as typeof import("../../src/app/api/webhooks/stage-changed/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/whoami/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/whoami">> = Specific
  const handler = {} as typeof import("../../src/app/api/whoami/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../src/app/(platform)/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/(platform)/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
